clc, clear, close all

load('Data/K_Canon.mat')
width = 4272;
height = 2848;

opening_angles = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.5, 39.5, 40.5, 41.5, 42.5, 43.5, 44.5, 45.5, 46.5, 47.5, 48.5, 49.5, 50.5, 51.5, 52.5, 53.5, 54.5, 55.5, 56.5, 57.5, 58.5, 59.5, 60.5, 61.5, 62.5, 63.5, 64.5, 65.5, 66.5, 67.5, 68.5, 69.5, 70.5, 71.5, 72.5, 73.5, 74.5, 75.5, 76.5, 77.5, 78.5, 79.5, 80.5, 81.5, 82.5, 83.5, 84.5, 85.5, 86.5, 87.5, 88.5, 89.5, 90.5, 91.5, 92.5, 93.5, 94.5, 95.5, 96.5, 97.5, 98.5, 99.5];
prior_probabilities = [0.0019519, 0.00060173, 0.00044518, 0.0010176, 0.0048432, 0.0034343, 0.0077197, 0.0038012, 0.0034098, 0.0062228, 0.0046328, 0.0039968, 0.0050633, 0.0044176, 0.0109, 0.0062325, 0.0060466, 0.017308, 0.01993, 0.014945, 0.0065994, 0.0080915, 0.015024, 0.012196, 0.015298, 0.011917, 0.014877, 0.011536, 0.0083802, 0.0090161, 0.0080915, 0.010332, 0.011599, 0.0089868, 0.00839, 0.0093244, 0.0094515, 0.0127, 0.0094613, 0.0087569, 0.010621, 0.010763, 0.012118, 0.014549, 0.013189, 0.014353, 0.01563, 0.02813, 0.050389, 0.053666, 0.047938, 0.065119, 0.065642, 0.02904, 0.016261, 0.011364, 0.0088645, 0.0071718, 0.006394, 0.0055574, 0.0067609, 0.010704, 0.022083, 0.025263, 0.015508, 0.021892, 0.02358, 0.0093928, 0.0039528, 0.0026564, 0.0019813, 0.0021476, 0.0025586, 0.0023384, 0.001179, 0.0011301, 0.0010322, 0.00092461, 0.00077295, 0.00072892, 0.00075338, 0.00076806, 0.00068, 0.00089526, 0.00086101, 0.00082187, 0.00082187, 0.00088058, 0.00091972, 0.00089036, 0.00079252, 0.00076806, 0.00090015, 0.00088058, 0.0015214, 0.0020987, 0.0016829, 0.0012328, 0.00091972, 0.00061641];
save('Synthetic/Data/sturm.mat', "opening_angles", "prior_probabilities")

u0 = width / 2;
v0 = height / 2;

f = zeros(size(opening_angles,2), 1);
f0_array = zeros(size(opening_angles,2),1);

for i = 1:size(opening_angles,2)
    disp("=============================")
    alpha_max = opening_angles(i);
    f0 = max(width, height) / 2 / tan(deg2rad(alpha_max / 2));
    f0_array(i) = f0;
    disp("f0")
    disp(f0)

    f(i) = run_test(f0, u0, v0, K);
end

figure;
plot(f0_array);

figure;
plot(real(f), '.');

f_filtered = nonzeros(real(f))
K_approx = real([median(f_filtered), 0, u0; 0, median(f_filtered), v0; 0, 0, 1])
save('K_approx.mat', 'K_approx')


function f = run_test(f0, u0, v0, K)
yaw = rand(1) * 45;
roll = rand(1) * 45;
pitch = rand(1) * 45;
R = rotYPR(yaw, roll, pitch);

P1 = [K, [10, 5, 20]'];
P2 = K * [R, [1, 1, 1]'];
F = fund(P1, P2);
% F = sampleFundamental(K, 0);

tau = 1;

% Undo intrinsic parameters
G = [tau, 0, 0; 0, 1, 0; u0, v0, 1] * F * [tau, 0, u0; 0, 1, v0; 0, 0, 1];
G_1 = diag([f0,f0,1]) * G * diag([f0,f0,1]);
G_1 = G_1 / norm(G_1, 'fro');

% SVD
[U,S,V] = svd(G_1);
u13 = U(1,3);
u23 = U(2,3);
v13 = V(1,3);
v23 = V(2,3);
a = S(1,1);
b = S(2,2);

% Quadratic equation
c1 = a^2 * (1 - u13^2) * (1 - v13^2) - b^2 * (1 - u23^2) * (1 - v23^2);
c2 = a^2 * (u13^2 + v13^2 - 2 * u13^2 * v13^2) - b^2 * (u23^2 + v23^2 - 2 * u23^2);
c3 = a^2 * u13^2 * v13^2 - b^2 * u23^2 * v23^2;

x = zeros(2,1);
d = sqrt(c2^2 - 4*c1*c3);
x(1) = ( -c2 + d ) / (2*c1);
x(2) = ( -c2 - d) / (2*c1);

f = sqrt(x) * f0;
disp("Diff abs(f - f0)")
disp(abs(f - f0))

disp("Recovered f")
[~,I] = min(abs(f - f0));
disp(f(I))

f = f(I);

% Linear equations
f1 = - (u23 + v13 * (a * u13 * v13 + b * u23 * v23)) / (a * u13 * u23 * (1 - v13^2) + b * v13 * v23 * (1 - u23^2));
% sqrt(f1) * f0
f2 = - (u13 + v23 * (a * u13 * v13 + b * u23 * v23)) / (a * v13 * v23 * (1 - u13^2) + b * u13 * u23 * (1 - v23^2));
% sqrt(f2) * f0
end